#!/usr/bin/env bash
: "${TF_STATE_bucket:?}" "${TF_STATE_key:?}"
tf() {
    (cd /var/terraform
    terraform remote config \
          -backend=s3 \
          -backend-config="bucket=$TF_STATE_bucket" \
          -backend-config="key=$TF_STATE_key.tfstate" > /dev/null

    terraform "$@")
}

tf-app() {
    local app="$1"
    : "${app:?}"; shift

    (cd /var/terraform/app
    terraform remote config \
          -backend=s3 \
          -backend-config="bucket=$TF_STATE_bucket" \
          -backend-config="key=$TF_STATE_key-$app.tfstate" > /dev/null
    TF_VAR_app="$app" \
        terraform "$@")
}

cluster-init() {
    tf apply /var/terraform
}

cluster-destroy() {
    tf destroy /var/terraform
}

cluster-git-receive() {
    local repo="$1"
    if [[ "$repo" != /* ]]; then
      repo="/$repo"
    fi
    export REPO="$repo"
    git init --quiet --bare "$repo"

    ln -s "$0" "$repo/hooks/pre-receive"
    git-shell -c "git-receive-pack '$repo'"
}

delete-remote-prefix() {
  # this removes "remote: " that git prefixes hook output with client side
  sed -u "s/^/"$'\e[1G'"/"
}

cluster-pre-receive() {
    # reads git push header data into variables
    read _ new _
    # use archive to tarpipe pushed branch files to a working directory
    git archive "$new" | (cd /tmp && tar -xpf -)

    # go to that directory
    local app="$(basename "$REPO")"
    : "${app:?}"

    cd /tmp # TODO(mattaitchison): refactor the following
    export TF_VAR_cluster TF_VAR_subnets TF_VAR_vpc
    TF_VAR_cluster="$(tf output cluster_name)"
    TF_VAR_subnets="$(tf output -json subnets | jq -c .value)"
    TF_VAR_vpc="$(tf output vpc_id)"

    SERVICE_ROLE="$(tf output service_role)" \
        /usr/local/bin/deploy "$TF_VAR_cluster" "$(basename "$REPO")" "latest"
}

cluster-help() {
    cat <<EOF
Available Commands:
    init
    destroy
    help
EOF
}

main() {
    set -eo pipefail; [[ "$TRACE" ]] && set -x
    declare script="$0" cmd="$1"
    [[ "$script" == "hooks/pre-receive" ]] && cmd="pre-receive"
    case "$cmd" in
        init)                            shift; cluster-init "$@";;
        tf)                              shift; tf "$@";;
        tf-app)                          shift; tf-app "$@";;
        destroy)                         shift; cluster-destroy "$@";;
        git-receive|git-receive-pack)    shift; cluster-git-receive "$@";;
        pre-receive)                     cluster-pre-receive | delete-remote-prefix;;
        *)                               cluster-help;;
    esac
}

[[ "$0" == "$BASH_SOURCE" ]] && main "$@"
